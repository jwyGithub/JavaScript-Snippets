{
    "Object.keys": {
        "prefix": "Object.keys",
        "body": "Object.keys($1).forEach((key, index) => {});\r\n",
        "description": "Object.keys() 方法会返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和正常循环遍历该对象时返回的顺序一致"
    },
    "Object.values": {
        "prefix": "Object.values",
        "body": "Object.values($1).forEach((value, index) => {});\r\n",
        "description": "Object.values()方法返回一个给定对象自身的所有可枚举属性值的数组，值的顺序与使用for...in循环的顺序相同 ( 区别在于 for-in 循环枚举原型链中的属性 )。"
    },
    "Object.entries": {
        "prefix": "Object.entries",
        "body": "Object.entries($1).forEach(([key, value], index) => {});\r\n",
        "description": "Object.entries()方法返回一个给定对象自身可枚举属性的键值对数组，其排列与使用 for...in 循环遍历该对象时返回的顺序一致（区别在于 for-in 循环还会枚举原型链中的属性）。"
    },
    "Object.assign": {
        "prefix": "Object.assign",
        "body": "Object.assign($1, $2);\r\n",
        "description": "Object.assign() 方法用于将所有可枚举属性的值从一个或多个源对象分配到目标对象。它将返回目标对象。"
    },
    "Object.freeze": {
        "prefix": "Object.freeze",
        "body": "Object.freeze($1);\r\n",
        "description": "Object.freeze() 方法可以冻结一个对象。一个被冻结的对象再也不能被修改；冻结了一个对象则不能向这个对象添加新的属性，不能删除已有属性，不能修改该对象已有属性的可枚举性、可配置性、可写性，以及不能修改已有属性的值。此外，冻结一个对象后该对象的原型也不能被修改。freeze() 返回和传入的参数相同的对象。"
    },
    "Object.is": {
        "prefix": "Object.is",
        "body": "Object.is($1, $2);\r\n",
        "description": "Object.is() 方法判断两个值是否为同一个值。"
    },
    "Object.prototype.toString": {
        "prefix": "Object.prototype.toString",
        "body": "Object.prototype.toString.call($1);\r\n",
        "description": "toString() 方法返回一个表示该对象的字符串。"
    },
    "Object.defineProperty": {
        "prefix": "Object.defineProperty",
        "body": "Object.defineProperty($1, $2, {\r\n    // 只有该属性描述符的类型可以被改变并且该属性可以从对应对象中删除,默认为 false\r\n    configurable: true,\r\n    // 只有在枚举相应对象上的属性时该属性显现,默认为 false\r\n    enumerable: true,\r\n    // 与属性关联的值。可以是任何有效的JavaScript值（数字，对象，函数等）\r\n    value: undefined,\r\n    // 只有与该属性相关联的值被assignment operator (en-US)改变时\r\n    writable: true,\r\n    // 作为该属性的 getter 函数，如果没有 getter 则为undefined。函数返回值将被用作属性的值。\r\n    get() {\r\n        return $1[$2];\r\n    },\r\n    // 作为属性的 setter 函数，如果没有 setter 则为undefined。函数将仅接受参数赋值给该属性的新值。\r\n    set(value) {\r\n        $1[$2] = value;\r\n    }\r\n});\r\n",
        "description": "Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。"
    },
    "Array.prototype.at": {
        "prefix": "Array.prototype.at",
        "body": "const arrayItem = $1.at($2);\r\n",
        "description": "at() 方法接收一个整数值并返回该索引的项目，允许正数和负数。负整数从数组中的最后一个项目开始倒数。"
    },
    "Array.prototype.concat": {
        "prefix": "Array.prototype.concat",
        "body": "const array = $1.concat($2);\r\n",
        "description": "concat() 方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。"
    },
    "Array.prototype.copyWithin": {
        "prefix": "Array.prototype.copyWithin",
        "body": "const array = $1.copyWithin($2);\r\n",
        "description": "copyWithin() 方法浅复制数组的一部分到同一数组中的另一个位置，并返回它，不会改变原数组的长度。"
    },
    "Array.prototype.entries": {
        "prefix": "Array.prototype.entries",
        "body": "const iterator = $1.entries();\r\nconsole.log(iterator.next().value);\r\n",
        "description": "entries() 方法返回一个新的Array Iterator对象，该对象包含数组中每个索引的键/值对。"
    },
    "Array.prototype.every": {
        "prefix": "Array.prototype.every",
        "body": "const flag = $1.every((item, index, array) => {});\r\n",
        "description": "every() 方法测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值。"
    },
    "Array.prototype.filter": {
        "prefix": "Array.prototype.filter",
        "body": "const array = $1.filter((item, index, array) => {});\r\n",
        "description": "filter() 方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。"
    },
    "Array.prototype.find": {
        "prefix": "Array.prototype.find",
        "body": "const findResult = $1.find((item, index, array) => {});\r\n",
        "description": "find() 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined。"
    },
    "Array.prototype.findIndex": {
        "prefix": "Array.prototype.findIndex",
        "body": "const findIndex = $1.findIndex((item, index, array) => {});\r\n",
        "description": "findIndex()方法返回数组中满足提供的测试函数的第一个元素的索引。若没有找到对应元素则返回-1。"
    },
    "Array.prototype.flat": {
        "prefix": "Array.prototype.flat",
        "body": "const result = $1.flat();\r\n",
        "description": "flat() 方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。"
    },
    "Array.prototype.flatMap": {
        "prefix": "Array.prototype.flatMap",
        "body": "const result = $1.flatMap((item, index, array) => {});\r\n",
        "description": "flatMap() 方法首先使用映射函数映射每个元素，然后将结果压缩成一个新数组。它与 map 连着深度值为1的 flat 几乎相同，但 flatMap 通常在合并成一种方法的效率稍微高一些。"
    },
    "Array.prototype.forEach": {
        "prefix": "Array.prototype.forEach",
        "body": "$1.forEach((item, index, array) => {});\r\n",
        "description": "forEach() 方法对数组的每个元素执行一次给定的函数。"
    },
    "Array.from": {
        "prefix": "Array.from",
        "body": "const result = Array.from($1, item => {});\r\n",
        "description": "Array.from() 方法对一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例。"
    },
    "Array.isArray": {
        "prefix": "Array.isArray",
        "body": "const flag = Array.isArray($1);\r\n",
        "description": "Array.isArray() 确定传递的值是否为数组。"
    },
    "Array.prototype.includes": {
        "prefix": "Array.prototype.includes",
        "body": "const flag = $1.includes($2);\r\n",
        "description": "includes()方法确定数组的条目中是否包含某个值，并相应地返回true或false"
    },
    "Array.prototype.indexOf": {
        "prefix": "Array.prototype.indexOf",
        "body": "const index = $1.indexOf($2);\r\n",
        "description": "indexOf()方法返回数组中可以找到给定元素的第一个索引，如果不存在，则返回-1"
    },
    "Array.prototype.join": {
        "prefix": "Array.prototype.join",
        "body": "const str = $1.join($2);\r\n",
        "description": "join()方法通过连接数组（或类似数组的对象）中的所有元素（用逗号或指定的分隔符字符串分隔）来创建并返回一个新字符串。如果数组只有一个项目，则在不使用分隔符的情况下返回该项目"
    },
    "Array.prototype.keys": {
        "prefix": "Array.prototype.keys",
        "body": "const iterator = $1.keys();\r\nfor (const key of iterator) {\r\n    console.log(key);\r\n}\r\n",
        "description": "keys方法返回一个新的数组迭代器对象，该对象包含数组中每个索引的键。"
    },
    "Array.prototype.lastIndexOf": {
        "prefix": "Array.prototype.lastIndexOf",
        "body": "const index = $1.lastIndexOf($2);\r\n",
        "description": "lastIndexOf方法返回可在数组中找到给定元素的最后一个索引，如果不存在，则返回 -1。向后搜索数组，从 开始。fromIndex"
    },
    "Array.prototype.map": {
        "prefix": "Array.prototype.map",
        "body": "const result = $1.map((item, index, array) => {\r\n    console.log(item, 'item');\r\n    console.log(index, 'index');\r\n    console.log(array, 'array');\r\n}, this);\r\n",
        "description": "map() 方法创建一个新数组，其结果是该数组中的每个元素是调用一次提供的函数后的返回值。"
    },
    "Array.prototype.reduce": {
        "prefix": "Array.prototype.reduce",
        "body": "const result = $1.reduce((pre, cur, index, array) => {\r\n    return pre;\r\n}, []);\r\n",
        "description": "reduce() 方法对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值。"
    },
    "Array.prototype.reduceRight": {
        "prefix": "Array.prototype.reduceRight",
        "body": "const result = $1.reduceRight((acc, cur, idx, arr) => {\r\n    return acc;\r\n}, []);\r\n",
        "description": "reduceRight() 方法接受一个函数作为累加器（accumulator）和数组的每个值（从右到左）将其减少为单个值。"
    },
    "Promise": {
        "prefix": "Promise-then-catch-fially",
        "body": "new Promise((resolve, reject) => {})\r\n    .then(() => {})\r\n    .catch(error => {\r\n        console.log(error);\r\n    })\r\n    .finally(() => {});\r\n",
        "description": "Promise 对象用于表示一个异步操作的最终完成 (或失败)及其结果值。"
    },
    "Promise.all": {
        "prefix": "Promise.all",
        "body": "Promise.all($1)\r\n    .then(res => {\r\n        console.log(res, 'res');\r\n    })\r\n    .catch(err => {\r\n        console.log(err, 'err');\r\n    })\r\n    .finally(() => {});\r\n",
        "description": "Promise 对象用于表示一个异步操作的最终完成 (或失败)及其结果值。"
    },
    "Promise.allSettled": {
        "prefix": "Promise.allSettled",
        "body": "Promise.allSettled($1).then(results => results.forEach(result => console.log(result.status)));\r\n",
        "description": "该Promise.allSettled()方法返回一个在所有给定的promise都已经fulfilled或rejected后的promise，并带有一个对象数组，每个对象表示对应的promise结果。"
    },
    "Promise.race": {
        "prefix": "Promise.race",
        "body": "Promise.race($1).then(value => {\r\n    console.log(value);\r\n});\r\n",
        "description": "Promise.race(iterable) 方法返回一个 promise，一旦迭代器中的某个promise解决或拒绝，返回的 promise就会解决或拒绝。"
    },
    "Proxy": {
        "prefix": "Proxy",
        "body": "const p = new Proxy($1, {\r\n    get: function (target, key) {\r\n        return target[key] || target.getItem(key) || undefined;\r\n    },\r\n    set: function (target, key, value) {\r\n        if (key in target) {\r\n            return false;\r\n        }\r\n        return target.setItem(key, value);\r\n    },\r\n    deleteProperty: function (target, key) {\r\n        if (key in target) {\r\n            return false;\r\n        }\r\n        return target.removeItem(key);\r\n    },\r\n    enumerate: function (target, key) {\r\n        return target.keys();\r\n    },\r\n    ownKeys: function (target, key) {\r\n        return target.keys();\r\n    },\r\n    has: function (target, key) {\r\n        return key in target || target.hasItem(key);\r\n    },\r\n    defineProperty: function (target, key, oDesc) {\r\n        if (oDesc && 'value' in oDesc) {\r\n            target.setItem(key, oDesc.value);\r\n        }\r\n        return target;\r\n    },\r\n    getOwnPropertyDescriptor: function (target, key) {\r\n        var vValue = target.getItem(key);\r\n        return vValue\r\n            ? {\r\n                  value: vValue,\r\n                  writable: true,\r\n                  enumerable: true,\r\n                  configurable: false\r\n              }\r\n            : undefined;\r\n    }\r\n});\r\n",
        "description": "Proxy 对象用于创建一个对象的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函数调用等）。"
    }
}